# -*- coding: utf-8 -*-
"""Desafio POO1 - Conta.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HMWirtNaebXsR8ZbxKLtkUtC8ZsPQj32

Finalizado parte do encapsulamento e polimorfismo
"""

#Importando bibliotecas
from abc import ABC, abstractclassmethod
from datetime import date

#classe conta e conta corrente
class Conta:
  def __init__ (self, numero_conta, cliente):
    self._saldo = 0
    self._numero_conta = numero_conta
    self._agencia = '001'
    self._cliente = cliente
    self.qtde_saque = 0
    self._historico = Historico()

  @property
  def agencia(self):
    return self._agencia

  @property
  def numero_conta(self):
        return self._numero_conta

  @property
  def cliente(self):
        return self._cliente

  @property
  def saldo(self):
        return self._saldo

  @classmethod
  def novaconta(cls,numero_conta, cliente,):
    return cls(numero_conta, cliente)

  def depositar (self, valor):
    try:
      self._saldo += valor
      print (f"Depósito de R${valor} realizado com sucesso! Novo saldo: {self._saldo}")
      return True
    except:
      print ("Depósito não realizado")
      return False

  def sacar (self,valor):
    saldo = self._saldo
    try:
      if valor<0 :
        print ("Insira um valor válido")
        return False
      if saldo <valor :
        print ("Saldo insuficiente.")
        return False
      else:
        self._saldo -= valor
        #numero_saques = len([transacao for transacao in self.historico.transacoes if transacao["tipo"] == Saque.__name__])
        print (f"Saque de R${valor} realizado com sucesso! Novo saldo: {self._saldo}")

        return True
    except:
      print ("Erro. Insira um valor válido")
      return False




class Conta_corrente (Conta):
  def __init__(self, numero_conta, cliente, limite_valor_diario=200, limite_numero_saques=3):
    super().__init__(numero_conta, cliente)
    self._limite_valor_diario = limite_valor_diario
    self._limite_numero_saques = limite_numero_saques

  def __str__(self):
    return f"Nome:{self._cliente}, CC:{self._numero_conta}, Agência:{self._agencia}"

  @property
  def limite_valor_diario(self):
    return self._limite_valor_diario

  @property
  def limite_numero_saques(self):
    return  self._limite_numero_saques

  def sacar (self,valor):
    if valor > self._limite_valor_diario:
      print("Valor maior que permitido")
      return False
    # elif qtde_saque +1 >self._limite_numero_saques:
    #   print("Limite de saques excedido")
    #   return False
    else:
       return super().sacar(valor)

#classe cliente e pessoa física
class Cliente:
  def __init__(self, endereco, contas):
    self._endereco = endereco
    self._contas = []


  def realizar_transacao(self,conta,transacao) :
    transacao.registrar(conta)

  def adicionar_conta(self,conta) :
    self._contas.append(conta)

class pessoa_fisica (Cliente):

  def __init__(self,endereco, contas, cpf, nome, data_nascimento):
    super().__init__(endereco, contas)
    self._nome = nome
    self._cpf = cpf
    self._data_nascimento = data_nascimento

  @property
  def nome (self):
    return self._nome

  @property
  def cpf (self):
    return self._cpf

  @property
  def data_nascimento (self):
    return self._data_nascimento

#Classe Historico
class Historico:

  def __init__(self):
    self.historico_transacao = []

  def adicionartransacao(self,transacao):
    self.historico_transacao.append({
        "tipo": transacao.__class__.__name__,
        "valor": transacao._valor
        #"data"
    })

#Classe transação

class Transacao (ABC):

  @property
  @abstractproperty
  def valor(self):
    pass

  @abstractclassmethod
  def registrar(self,valor):
    pass


class Saque(Transacao):
  def __init__(self,valor):
    self._valor = valor

  @property
  def valor(self):
    return self._valor

  def registrar(self,conta):
    if conta.sacar(self.valor):
      conta._historico.adicionartransacao(self)

#Implementação de conta
conta_felipe = Conta('321', 'Felipe')
print (conta_felipe.saldo)

#Operação de depósito
print (conta_felipe.saldo)
conta_felipe.depositar(1000)
print(conta_felipe.saldo)

#Operação de saque
conta_felipe.sacar(100)

#cadastro pessoa fisica
felipe = pessoa_fisica('Rua', 1, 23, 'Felipe', '01/03/1988')

#saque com base em conta-corrente
saque = Saque(100)
felipe.realizar_transacao(conta_felipe,saque)